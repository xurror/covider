buildscript {
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/plugins-release" }
    }
}

plugins {
    id 'org.springframework.boot' version '2.3.1.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id "com.gorylenko.gradle-git-properties" version '2.2.2'
    id "net.ltgt.apt-eclipse" version '0.21'
    id "net.ltgt.apt-idea" version '0.21'
    id "jacoco"
    id 'java'
}

apply plugin: 'io.spring.dependency-management'
dependencyManagement {
    imports {
        mavenBom "org.springframework:spring-framework-bom:5.2.6.RELEASE"
    }
}

project.ext.mysqlUser = "root"
project.ext.mysqlPassword = "mysql"
group = 'cm.ubuea.covider'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_11

defaultTasks "bootRun"

springBoot {
    mainClassName = "cm.ubuea.covider.ServerApplication"
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation "org.springframework.boot:spring-boot-starter-cache"
    implementation "org.springframework.boot:spring-boot-starter-aop"
    implementation "org.springframework.boot:spring-boot-starter-logging"
    implementation "org.springframework.security:spring-security-config"
    implementation "org.springframework.security:spring-security-data"
    implementation "org.springframework.security:spring-security-web"
    implementation "org.springframework.boot:spring-boot-starter-mail"
    implementation "org.springframework.boot:spring-boot-starter-thymeleaf"
    implementation "org.zalando:problem-spring-web:0.25.2"
    implementation 'io.github.jhipster:jhipster-framework:3.8.0'
    implementation "com.fasterxml.jackson.core:jackson-annotations"
    implementation "com.fasterxml.jackson.core:jackson-databind"
    implementation 'org.eclipse.persistence:org.eclipse.persistence.jpa:2.7.7'
    implementation "javax.annotation:javax.annotation-api"
    implementation "javax.transaction:javax.transaction-api"
    implementation "javax.cache:cache-api"
    implementation "org.ehcache:ehcache"
    implementation 'org.apache.commons:commons-lang3:3.10'
    implementation 'org.flywaydb:flyway-core:6.4.4'
    implementation 'io.jsonwebtoken:jjwt-api:0.10.5'
    implementation "org.hibernate.validator:hibernate-validator"
    implementation ('org.springframework.boot:spring-boot-starter-data-jpa') {
        exclude group: 'org.hibernate'
    }
    implementation "org.springdoc:springdoc-openapi-ui:1.2.32"

    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.10.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.10.5'
    runtimeOnly 'mysql:mysql-connector-java'

    testImplementation 'com.h2database:h2:1.4.200'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}

// task integrationTest(type:Test) {
//     description = "Execute integration tests."
//     include "**/*IT*", "**/*IntTest*"
//     dependsOn cargoStartLocal
//     finalizedBy cargoStopLocal
// }

// integrationTest {
//     useJUnitPlatform()
//     testLogging { // FINERACT-927
//         events "skipped", "failed"
//         showStandardStreams = false
//         exceptionFormat "full"
//     }
// }

test {
    useJUnitPlatform()
}

import groovy.sql.Sql

configurations {
    driver.extendsFrom runtimeOnly
    weaver.extendsFrom implementation
}

task weaveJpaEntities(type: JavaExec, dependsOn: [compileJava, processResources]) {
    main = 'org.eclipse.persistence.tools.weaving.jpa.StaticWeave'
    classpath configurations.weaver
    args '-persistenceinfo'
    args processResources.destinationDir.absolutePath
    args '-classpath'
    args configurations.compile.incoming.files.asPath
    args '-loglevel'
    args 'INFO' // logging level at "FINE" shows alot of output to console.
    args sourceSets.main.java.outputDir.absolutePath
    args sourceSets.main.java.outputDir.absolutePath

    inputs.files fileTree(processResources.destinationDir).matching({pattern -> pattern.include('**/META-INF/persistence.xml')})
}
classes.dependsOn weaveJpaEntities

URLClassLoader loader = GroovyObject.class.classLoader
configurations.driver.each {File file ->
    loader.addURL(file.toURL())
}

task createDB {
    description= "Creates the Database. Needs database name to be passed (like: -PdbName=someDBname)"
    doLast {
        def sql = Sql.newInstance( 'jdbc:mysql://localhost:3306/?serverTimezone=UTC', mysqlUser, mysqlPassword, 'com.mysql.jdbc.Driver')
        sql.execute( 'create database '+"`$dbName`" )
    }
}

task dropDB {
    description= "Drops the specified database. The database name has to be passed (like: -PdbName=someDBname)"
    doLast {
        def sql = Sql.newInstance( 'jdbc:mysql://localhost:3306/?serverTimezone=UTC', mysqlUser, mysqlPassword, 'com.mysql.jdbc.Driver')
        sql.execute( 'DROP DATABASE '+"`$dbName`")
    }
}

gitProperties {
    failOnNoGitDirectory = false
    keys = ["git.branch", "git.commit.id.abbrev", "git.commit.id.describe"]
}

compileJava.dependsOn processResources
